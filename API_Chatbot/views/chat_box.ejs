<html>

    <head>
        <title>Chatting With <%= chatbot_name %></title>
        
        <link rel="stylesheet" href="/stylesheets/style.css">
    </head>
    
    <script>
        function init(){

            const message_container = document.getElementById('chatbox');
            const chat_container = document.getElementById('chat_container');
            const form = document.getElementById('sendmsg');
            const sendpop = document.getElementById('sendpop');
            const input_box = document.querySelector('input');
            //const printbutton = document.getElementById('scrollprint');
            //const scrollbutton = document.getElementById('autoscroll');

            window.post = function (url, data) {
                return fetch(url, { method: "POST", body: JSON.stringify(data) });
            }

            /*
            printbutton.addEventListener("click", (e) => {
                e.preventDefault();
                console.log("scrollTop message =" + message_container.scrollTop + "  scrollHeight= " + message_container.scrollHeight + " clientHeight = " + message_container.clientHeight);
                console.log("scrollTop chat =" + chat_container.scrollTop + "  scrollHeight= " + chat_container.scrollHeight + " clientHeight = " + chat_container.clientHeight);
            });

            scrollbutton.addEventListener("click", (e) => {
                e.preventDefault();
                scrolladjust();
            });
            */

            // Example POST method implementation:
            async function postData(url = '', data = {}) {
                // Default options are marked with *
                const response = await fetch(url, {
                    method: 'POST', // *GET, POST, PUT, DELETE, etc.
                    mode: 'cors', // no-cors, *cors, same-origin
                    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                    credentials: 'same-origin', // include, *same-origin, omit
                    headers: {
                        'Content-Type': 'application/json'
                        // 'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    redirect: 'follow', // manual, *follow, error
                    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                    body: JSON.stringify({data, userChatting: "<%= userLogin %>", isFirstAccess: "no"}) // body data type must match "Content-Type" header
                });
                return response.json(); // parses JSON response into native JavaScript objects
            }

            form.addEventListener("submit", (e) => {
                e.preventDefault();
                selfReply(input_box.value)
                postData('http://localhost:3000/chat/<%= chatbot_name %>', { message : input_box.value})
                    .then(data => {
                        console.log("result data.botReply = " + data.botReply)
                        botReply(data.botReply);
                    });
                
                
            });

            sendpop.addEventListener("click", (e) => {
                e.preventDefault();
                selfReply("pop")
                postData('http://localhost:3000/chat/<%= chatbot_name %>', { message: input_box.value })
                    .then(data => {
                        console.log("result data.botReply = " + data.botReply)
                        botReply(data.botReply);
                    });


            });

            function botReply(message) {  
                let scrollIsPossible = scrollpossible();              
                message_container.innerHTML += `<div class=bot>${message}</div>`;
                if (scrollIsPossible == true) {
                    scrolladjust();
                }
            }
            
            function selfReply(message) {
                //On regarde si l'utilisateur est en bas de la page de messages
                let scrollIsPossible = scrollpossible();
                console.log(scrollIsPossible);
                //Si il faut scroll, alors on scroll en bas, apres envoie du message
            

                message_container.innerHTML += `<div class=self>${message}</div>`;

                if (scrollIsPossible==true) {
                    scrolladjust();
                }

                input_box.value = '';

                //location.href = '#edge';
                /*
                bot.reply("local - user", message).then(function (reply) {
                    botReply(reply);
                });
                */
                
            }

            function scrollpossible(){
                if(chat_container.scrollHeight - Math.abs(chat_container.scrollTop) === chat_container.clientHeight){
                    return true;
                }
                return false;
            }

            function scrolladjust(){
                chat_container.scrollTop = chat_container.scrollHeight - chat_container.clientHeight;
            }

        }

    </script>

<body onload="init()">
    <button id="sendpop" type="button">send pop</button>
    <% if (botReply != undefined) { %>
    <div id='botReplybox'>
        <%= botReply %>
    </div>
    <% } %>
    <div id='chat_container' class=chat>
        <div id=chatbox class=messages></div>
        <div id=edge></div>
        
        <form id="sendmsg" class="actions" action="/chat/<%= chatbot_name %>" method="POST">
            <input type=text placeholder="press ‘Enter’ to send…" name="userMessage">
            <input type="hidden" name="status" value="notFirstAccess" />
        </form>
    </div>

</body>

</html>